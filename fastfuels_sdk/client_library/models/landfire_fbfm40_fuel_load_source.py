# coding: utf-8

"""
    FastFuels API

    A JSON API for creating, editing, and retrieving 3D fuels data for next generation fire behavior models.

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from fastfuels_sdk.client_library.models.curingliveherbaceous import Curingliveherbaceous
from fastfuels_sdk.client_library.models.curinglivewoody import Curinglivewoody
from fastfuels_sdk.client_library.models.feature_type import FeatureType
from fastfuels_sdk.client_library.models.interpolation_method import InterpolationMethod
from typing import Optional, Set
from typing_extensions import Self

class LandfireFBFM40FuelLoadSource(BaseModel):
    """
    LandfireFBFM40FuelLoadSource
    """ # noqa: E501
    feature_masks: Optional[List[FeatureType]] = Field(default=None, description="List of feature masks to apply to the surface grid attribute", alias="featureMasks")
    source: Optional[StrictStr] = 'LANDFIRE'
    product: Optional[StrictStr] = 'FBFM40'
    version: Optional[StrictStr] = '2022'
    interpolation_method: Optional[InterpolationMethod] = Field(default=None, alias="interpolationMethod")
    fraction_one_hour: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=1.0, description="Fraction of fuel load from the 1-hour size class category to include in the total fuel load. Can be greater than 1 to include more than 100% of the fuel load, and must be greater than or equal to 0.", alias="fractionOneHour")
    fraction_ten_hour: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=0.1, description="Fraction of fuel load from the 10-hour size class category to include in the total fuel load. Can be greater than 1 to include more than 100% of the fuel load, and must be greater than or equal to 0.", alias="fractionTenHour")
    fraction_hundred_hour: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=0.0, description="Fraction of fuel load from the 100-hour size class category to include in the total fuel load. Can be greater than 1 to include more than 100% of the fuel load, and must be greater than or equal to 0.", alias="fractionHundredHour")
    fraction_live_herbaceous: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=0.0, description="Fraction of fuel load from the live herbaceous category to include in the total fuel load. Can be greater than 1 to include more than 100% of the fuel load, and must be greater than or equal to 0.", alias="fractionLiveHerbaceous")
    fraction_live_woody: Optional[Union[Annotated[float, Field(strict=True, ge=0.0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=0.0, description="Fraction of fuel load from the live woody category to include in the total fuel load. Can be greater than 1 to include more than 100% of the fuel load, and must be greater than or equal to 0.", alias="fractionLiveWoody")
    curing_live_herbaceous: Optional[Curingliveherbaceous] = Field(default=None, alias="curingLiveHerbaceous")
    curing_live_woody: Optional[Curinglivewoody] = Field(default=None, alias="curingLiveWoody")
    __properties: ClassVar[List[str]] = ["featureMasks", "source", "product", "version", "interpolationMethod", "fractionOneHour", "fractionTenHour", "fractionHundredHour", "fractionLiveHerbaceous", "fractionLiveWoody", "curingLiveHerbaceous", "curingLiveWoody"]

    @field_validator('source')
    def source_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['LANDFIRE']):
            raise ValueError("must be one of enum values ('LANDFIRE')")
        return value

    @field_validator('product')
    def product_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['FBFM40']):
            raise ValueError("must be one of enum values ('FBFM40')")
        return value

    @field_validator('version')
    def version_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['2022']):
            raise ValueError("must be one of enum values ('2022')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LandfireFBFM40FuelLoadSource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of curing_live_herbaceous
        if self.curing_live_herbaceous:
            _dict['curingLiveHerbaceous'] = self.curing_live_herbaceous.to_dict()
        # override the default output from pydantic by calling `to_dict()` of curing_live_woody
        if self.curing_live_woody:
            _dict['curingLiveWoody'] = self.curing_live_woody.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LandfireFBFM40FuelLoadSource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "featureMasks": obj.get("featureMasks"),
            "source": obj.get("source") if obj.get("source") is not None else 'LANDFIRE',
            "product": obj.get("product") if obj.get("product") is not None else 'FBFM40',
            "version": obj.get("version") if obj.get("version") is not None else '2022',
            "interpolationMethod": obj.get("interpolationMethod"),
            "fractionOneHour": obj.get("fractionOneHour") if obj.get("fractionOneHour") is not None else 1.0,
            "fractionTenHour": obj.get("fractionTenHour") if obj.get("fractionTenHour") is not None else 0.1,
            "fractionHundredHour": obj.get("fractionHundredHour") if obj.get("fractionHundredHour") is not None else 0.0,
            "fractionLiveHerbaceous": obj.get("fractionLiveHerbaceous") if obj.get("fractionLiveHerbaceous") is not None else 0.0,
            "fractionLiveWoody": obj.get("fractionLiveWoody") if obj.get("fractionLiveWoody") is not None else 0.0,
            "curingLiveHerbaceous": Curingliveherbaceous.from_dict(obj["curingLiveHerbaceous"]) if obj.get("curingLiveHerbaceous") is not None else None,
            "curingLiveWoody": Curinglivewoody.from_dict(obj["curingLiveWoody"]) if obj.get("curingLiveWoody") is not None else None
        })
        return _obj


